var PadTeam  = function() {
	// require pad_monster.js
	this.monsters = [null, null, null, null, null, null];
};
PadTeam.prototype = {
	monsters: null,

	hpRates: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
	atkRates: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
	recRates: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
	
	hpResults: [null, null, null, null, null, null],
	atkResults: [null, null, null, null, null, null],
	recResults: [null, null, null, null, null, null],
	atk2Results: [null, null, null, null, null, null],
	
	hpTotal: 0,
	recTotal: 0,
	atkTotal: 0,
	atkAttributeTotal: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
	
	hpDefaults: [null, null, null, null, null, null],
	atkDefaults: [null, null, null, null, null, null],
	recDefaults: [null, null, null, null, null, null],
	atk2Defaults: [null, null, null, null, null, null],

	hpTotalDefault: 0,
	recTotalDefault: 0,
	atkTotalDefault: 0,
	atkAttributeTotalDefault: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
	
	autoRcv: 0,
	
	ALL_ATTRIBUTE: "6",
	
	leaderSkills: [null, null],

	selectMonster: function (id, monsterId, initLevel) {
		if (id.match(/^[1-6]+$/) == null) {
			return;
		}
		if (monsterId.match(/^[\d]+$/) == null) {
			monsterId = "";
		}
		
		if (monsterId == "" || monsterId == "0") {
			this.monsters[parseInt(id) - 1] = null;
			this.clearResult(id);

			this.applyLeaderSkills();
			this.writeLv();
			this.writeAtk();
			this.writeHp();
			this.writeRec();
			this.writeExtras();
			this.createUrl();
			return;
		}
		
		(function (padTeam) {
			$.getJSON('/pad_monster/summon/' + monsterId, function(data, status) {
				var monsterData = data.monster;
				var key = parseInt(id) - 1;
				if (monsterData == null) {
					padTeam.monsters[key] = null;
					padTeam.clearResult(id);
					return;
				}
				var monster = new PadMonster();
				monster.setMonsterId(monsterData.id);
				var name = monsterData.name;
				monster.setName(name);
				var lvMax = parseInt(monsterData.lv_max);
				monster.setLvMax(lvMax);
				monster.setHpDefault(parseInt(monsterData.hp_default));
				monster.setAtkDefault(parseInt(monsterData.atk_default));
				monster.setRecDefault(parseInt(monsterData.rec_default));
				monster.setHpMax(parseInt(monsterData.hp_max));
				monster.setAtkMax(parseInt(monsterData.atk_max));
				monster.setRecMax(parseInt(monsterData.rec_max));
				monster.setHpExp(parseFloat(monsterData.hp_exp));
				monster.setAtkExp(parseFloat(monsterData.atk_exp));
				monster.setRecExp(parseFloat(monsterData.rec_exp));
				monster.setExperienceType(parseInt(monsterData.experience_type));
				
				monster.setType1(parseInt(monsterData.type1));
				monster.setType2(parseInt(monsterData.type2));
				monster.setAttribute1(parseInt(monsterData.attribute1));
				monster.setAttribute2(parseInt(monsterData.attribute2));
				monster.setLeaderSkill(monsterData.leader_skill);
				monster.setAwokenSkills(monsterData.awoken_skills);

				monster.setRarity(parseInt(monsterData.rarity));
				monster.setCost(parseInt(monsterData.cost));

				padTeam.monsters[key] = monster;
				$("#result_name_" + id).text(name);
				$("#default_name_" + id).text(name);
				
				$("#lv_" + id).removeAttr("disabled");
				$("#hp_plus_" + id).removeAttr("disabled");
				$("#atk_plus_" + id).removeAttr("disabled");
				$("#rec_plus_" + id).removeAttr("disabled");

				var lvId = '#lv_' + id;
				var lv = $(lvId).val();
				$(lvId).text('');
				for (var i = 1; i <= lvMax; i++) {
					$(lvId).append('<option value="' + i + '">' + i + '</option>\n');
				}
				if (initLevel || lv > lvMax) {
					lv = lvMax;
				}
				$(lvId).val(lv);
				
				padTeam.calculate(id);
				
				padTeam.writeLv();
				padTeam.writeAtk();
				padTeam.writeHp();
				padTeam.writeRec();
				padTeam.writeExtras();
		    	padTeam.createUrl();
		    });
			
		})(this);

	},
	
	changeLevel: function(id) {
		this.calculate(id);
		this.writeLv();
		this.writeAtk();
		this.writeHp();
		this.writeRec();
		this.createUrl();
	},
	changeAtkPlus: function(id) {
		this.calculate(id);
		this.writeAtk();
		this.createUrl();
		
	},
	changeHpPlus: function(id) {
		this.calculate(id);
		this.writeHp();
		this.createUrl();
	},
	changeRecPlus: function(id) {
		this.calculate(id);
		this.writeRec();
		this.createUrl();
	},
	changeRate: function() {
		this.applyLeaderSkills();
		this.writeAtk();
		this.writeHp();
		this.writeRec();
	},
	toggleLeaderSkill: function() {
		this.applyLeaderSkills();
		this.writeAtk();
		this.writeHp();
		this.writeRec();
	},
	
	calculate: function(id) {
		var key = parseInt(id) - 1;
		var monster = this.monsters[key];
		if (monster == null) {
			return false;
		}
		
		var lv = parseInt($('#lv_' + id).val());
		monster.setLv(lv);
		
		var hpPlus = $("#hp_plus_" + id).val();
		var atkPlus = $("#atk_plus_" + id).val();
		var recPlus = $("#rec_plus_" + id).val();
		if (hpPlus.match(/^\d{1,2}$/) == null) {
			hpPlus = 0;
		}
		if (atkPlus.match(/^\d{1,2}$/) == null) {
			atkPlus = 0;
		}
		if (recPlus.match(/^\d{1,2}$/) == null) {
			recPlus = 0;
		}
		
		monster.setHpPlus(parseInt(hpPlus));
		monster.setAtkPlus(parseInt(atkPlus));
		monster.setRecPlus(parseInt(recPlus));

		monster.calculateAll();

		this.applyLeaderSkills();

		return true;
	},

	writeLv: function() {
		for (var i = 0; i < 6; i++) {
			if (this.monsters[i] == null) {
				continue;
			}
			$("#default_lv_" + (i + 1)).text(this.monsters[i].getLv());
		}
	},
	
	writeAtk: function() {
		var totalChanged = false;
		var atk2Default, atk2Result;
		for (var i = 0; i < 6; i++) {
			if (this.monsters[i] == null) {
				continue;
			}
			atk2Result = this.atk2Results[i] > 0 ? '<p class="sub_atk">' + this.atk2Results[i] + "</p>" : "";
			atk2Default = this.atk2Defaults[i] > 0 ? '<p class="sub_atk">' + this.atk2Defaults[i] + "</p>" : "";
			
			$("#result_atk_" + (i + 1)).html(this.atkResults[i] + atk2Result);
			$("#default_atk_" + (i + 1)).html(this.atkDefaults[i] + atk2Default);
			
			if (this.atkRates[i] > 1.0) {
				totalChanged = true;
				$("#result_atk_" + (i + 1)).addClass("red");
			} else {
				$("#result_atk_" + (i + 1)).removeClass("red");
			}
		}
		$("#result_atk").text(this.atkTotal);
		$("#default_atk").text(this.atkTotalDefault);
		
		for (var i = 1; i <= 5; i++) {
			$("#result_atk_attr_" + i).text(this.atkAttributeTotal[i]);
			$("#default_atk_attr_" + i).text(this.atkAttributeTotalDefault[i]);
		}
		
		if (totalChanged) {
			$("#result_atk").addClass("red");
		} else {
			$("#result_atk").removeClass("red");
		}
	},
	writeHp: function() {
		var totalChanged = false;
		for (var i = 0; i < 6; i++) {
			if (this.monsters[i] == null) {
				continue;
			}
			$("#result_hp_" + (i + 1)).text(this.hpResults[i]);
			$("#default_hp_" + (i + 1)).text(this.hpDefaults[i]);
			
			if (this.hpRates[i] > 1.0) {
				totalChanged = true;
				$("#result_hp_" + (i + 1)).addClass("red");
			} else {
				$("#result_hp_" + (i + 1)).removeClass("red");
			}
		}
		$("#result_hp").text(this.hpTotal);
		$("#default_hp").text(this.hpTotalDefault);
		
		$("#hp50").text(Math.ceil(this.hpTotal * 0.5));
		$("#hp70").text(Math.ceil(this.hpTotal * 0.7));
		$("#hp20").text(Math.floor(this.hpTotal * 0.2));
		$("#hp80").text(Math.ceil(this.hpTotal * 0.8));
		$("#hp5").text(Math.ceil(this.hpTotal * 0.05));
		$("#hp40").text(Math.ceil(this.hpTotal * 0.4));
		
		if (totalChanged) {
			$("#result_hp").addClass("red");
			$("#hp50,#hp70,#hp20,#hp80,#hp5,#hp40").addClass("red");
		} else {
			$("#result_hp").removeClass("red");
			$("#hp50,#hp70,#hp20,#hp80,#hp5,#hp40").removeClass("red");
		}
	},
	
	writeRec: function() {
		var totalChanged = false;
		for (var i = 0; i < 6; i++) {
			if (this.monsters[i] == null) {
				continue;
			}
			$("#result_rec_" + (i + 1)).text(this.recResults[i]);
			$("#default_rec_" + (i + 1)).text(this.recDefaults[i]);
			
			if (this.recRates[i] > 1.0) {
				totalChanged = true;
				$("#result_rec_" + (i + 1)).addClass("red");
			} else {
				$("#result_rec_" + (i + 1)).removeClass("red");
			}
		}
		$("#result_rec").text(this.recTotal >= 0 ? this.recTotal : 0 + "(" + this.recTotal + ")");
		$("#default_rec").text(this.recTotalDefault);
		if (totalChanged) {
			$("#result_rec").addClass("red");
		} else {
			$("#result_rec").removeClass("red");
		}
		$("#auto_rcv").text(this.autoRcv);
	},
	
	writeExtras: function() {
		var totalCost = 0;
		var totalRarity = 0;
		var averageRarity = 0;
		var numberOfMonsters = 0;
		
		for (var i = 0; i < 6; i++) {
			if (this.monsters[i] == null) {
				continue;
			}
			numberOfMonsters++;
			var cost = this.monsters[i].getCost();
			$("#default_cost_" + (i + 1)).text(cost);
			totalCost += cost;
			var rarity = this.monsters[i].getRarity();
			$("#default_rarity_" + (i + 1)).text(rarity);
			totalRarity += rarity;
		}
		averageRarity = Math.round(totalRarity / numberOfMonsters * 10) / 10;
		$("#cost_total").text(totalCost);
		$("#rarity_total").text(totalRarity);
		$("#rarity_average").text(averageRarity);
		
		
		var totalAwokenSkills = {};
		for (var i = 0; i < 6; i++) {
			if (this.monsters[i] == null) {
				continue;
			}
			var awokenSkills = this.monsters[i].getAwokenSkills();
			for (var j = 1; j <= 9; j++) {
				
				if (awokenSkills[j] != null) {
					var awokenSkillId = awokenSkills[j].id;
					if (totalAwokenSkills[awokenSkillId] == null) {
						totalAwokenSkills[awokenSkillId] = awokenSkills[j];
						totalAwokenSkills[awokenSkillId].count = 1;
					} else {
						totalAwokenSkills[awokenSkillId].count++;
					}
				}
			}
		}
		
		$("#awoken_skills").text("");
		for (var i in totalAwokenSkills) {
			var $awokenSkill = $("<dl />").addClass("display_line").addClass("clearfix");
			var $awokenSkillName = $("<dt />").text(totalAwokenSkills[i].name);
			var text = "×" + totalAwokenSkills[i].count;
			var $awokenSkillCount = $("<dd />").text(text);
			$awokenSkill.append($awokenSkillName);
			$awokenSkill.append($awokenSkillCount);
			$("#awoken_skills").append($awokenSkill);
		}
		
		
		
		
	},
	
	applyLeaderSkills: function() {
		var leaderSkill;
		var leaderSkills = [null, null];
		
		for (var i = 0;  i < 6; i++) {
			if (this.monsters[i] == null) {
				continue;
			}
			
			if (i == 0) {
				leaderSkill = this.monsters[i].getLeaderSkill();
				if (leaderSkill != null) {
					leaderSkills[0] = leaderSkill;
				}
			} else if (i == 5) {
				leaderSkill = this.monsters[i].getLeaderSkill();
				if (leaderSkill != null) {
					leaderSkills[1] = leaderSkill;
				}
			}
		}
		
		for (var j = 0; j < 2; j++) {
			
			var previousActualRate = $("#ls_rate_select_" + (j + 1)).val();
			$("#ls_rate_select_" + (j + 1)).hide().text("");
			
			if (leaderSkills[j] == null || leaderSkills[j].name == "なし") {
				continue;
			}
			if (
				leaderSkills[j].start_atk_rate > 0 
				&& 
				leaderSkills[j].start_atk_rate < leaderSkills[j].atk_rate
			) 
			{
				var start_atk_rate = parseFloat(leaderSkills[j].start_atk_rate);
				var atk_rate = parseFloat(leaderSkills[j].atk_rate);
				var min_combo = parseInt(leaderSkills[j].min_combo);
				var min_drop = parseInt(leaderSkills[j].min_drop);
				var requireAttributeNum = leaderSkills[j].require_attribute_num;
				var unit = "";
				var num = 0;
				if (min_combo > 0) {
					unit = "コンボ";
					num = parseInt(min_combo);
				} else if (requireAttributeNum > 0) {
					unit = "属性";
					num = parseInt(requireAttributeNum);
				} else if (min_drop > 0) {
					unit = "ドロップ";
					num = parseInt(min_drop);
				}
				
				var atk_increment = parseFloat(leaderSkills[j].atk_increment);
				var step = (atk_rate - start_atk_rate) / atk_increment;

				$("#ls_rate_select_" + (j + 1)).text("");
				var actualRate = null;
				for (var k = 0; k <= step; k++) {
					var rate = start_atk_rate + atk_increment * k;
					var $option = $("<option />");
					$option.text(rate + "倍 (" + (num + k) + unit + ")");
					$option.val(rate);
					$("#ls_rate_select_" + (j + 1)).append($option);
					
					if (previousActualRate == rate) {
						actualRate = previousActualRate;
					}
					if (actualRate == null && k == step) {
						actualRate = rate;
					}
				}
				$("#ls_rate_select_" + (j + 1)).val(actualRate).show();
			}
		}
		
		this.clearRates();
		this._calculateRates(leaderSkills);
		
		this.clearResults();
		this._calculateStatus();
		
		this.autoRcv = 0;
		for (var j = 0; j < 2; j++) {
			if (leaderSkills[j] == null) {
				continue;
			}
			if (this.recDefaults[j * 5] == null) {
				continue;
			}
			this.autoRcv += Math.round(this.recDefaults[j * 5] * parseFloat(leaderSkills[j].auto_rcv_rate)) + parseInt(leaderSkills[j].auto_rcv_value);
		}
		
		for (var j = 0; j < 2; j++) {
			if (leaderSkills[j] == null || leaderSkills[j].name == "なし") {
				$("#ls_name_" + (j + 1)).text("なし");
				$("#ls_name_" + (j + 1)).removeClass("red");
				$("#ls_text_" + (j + 1)).text("");
				continue;
			}
			$("#ls_name_" + (j + 1)).text(leaderSkills[j].name);
			$("#ls_name_" + (j + 1)).addClass("red");
			$("#ls_text_" + (j + 1)).text(leaderSkills[j].text);
			$("#ls_name_" + (j + 1)).addClass("red");
		}
		
	},
	
	_countTeamAttributes: function() {
		var teamAttributeCount = {1:0, 2:0, 3:0, 4:0, 5:0};
		
		for (var i = 0;  i < 6; i++) {
			if (this.monsters[i] == null) {
				continue;
			}
			var attribute1 = parseInt(this.monsters[i].getAttribute1());
			var attribute2 = parseInt(this.monsters[i].getAttribute2());
			teamAttributeCount[attribute1]++;
			if (attribute2 != 0) {
				teamAttributeCount[attribute2]++;
			}
		}
		
		return teamAttributeCount;
	},
	
	_checkRequireAttributes: function(requireAttributes) {
		var teamAttributeCount = this._countTeamAttributes();
		
		var fill = true;
		if (requireAttributes.length > 0) {
			for (var attrKey in requireAttributes) {
				if (teamAttributeCount[parseInt(requireAttributes[attrKey])] == 0) {
					fill = false;
					break;
				}
			}
		}
		return fill;
	},
	
	_checkRequireAttributeNum: function(requireAttributeNum) {
		var teamAttributeCount = this._countTeamAttributes();
		var fill = true;
		if (requireAttributeNum > 0) {
			attributeCount = 0;
			for (var attrKey in teamAttributeCount) {
				if (teamAttributeCount[attrKey] > 0) {
					attributeCount++;
				}
			}
			if (attributeCount < requireAttributeNum) {
				fill = false;
			}
		}
		return fill;
	},

	_getRequiredAttributeNumFromRate: function(selectedRate, leaderSkill) {
		var atk_rate = parseFloat(leaderSkill.atk_rate);
		var start_atk_rate = parseFloat(leaderSkill.start_atk_rate);
		var atk_increment =  parseFloat(leaderSkill.atk_increment);
		var minAttributeNum = parseInt(leaderSkill.require_attribute_num);
		
		var step = (atk_rate - start_atk_rate) / atk_increment;
		var attributeNum = minAttributeNum;
		for (var k = 0; k <= step; k++) {
			var rate = start_atk_rate + atk_increment * k;
			if (selectedRate == rate) {
				attributeNum = minAttributeNum + k;
				break;
			}
		}
		return attributeNum;
	},
	
	
 	_calculateRates: function(leaderSkills) {
		var teamAttributeCount = this._countTeamAttributes();
		
		for (var j = 0; j < 2; j++) {
			if (leaderSkills[j] == null) {
				continue;
			}
			var targetAttributes = leaderSkills[j].attributes.split(",");
			var targetTypes = leaderSkills[j].types.split(",");
			
			var requireAttributes = leaderSkills[j].require_attributes.split(",");
			var requireAttributeNum = leaderSkills[j].require_attribute_num;
			
			for (var i = 0;  i < 6; i++) {
				if (this.monsters[i] == null) {
					continue;
				}
				var up = false;
				var disabled = $("#disable_ls_" + (j + 1)).is(":checked");
				if (disabled) {
					break;
				}
				
				if (!this._checkRequireAttributes(requireAttributes, teamAttributeCount)) {
					break;
				}
				
				if (
						leaderSkills[j].start_atk_rate > 0 
						&& 
						leaderSkills[j].start_atk_rate < leaderSkills[j].atk_rate
						&& 
						requireAttributeNum > 0
				) {
					var selectedRate = $("#ls_rate_select_" + (j + 1)).val();
					requireAttributeNum = this._getRequiredAttributeNumFromRate(selectedRate, leaderSkills[j])

				}
				
				if (!this._checkRequireAttributeNum(requireAttributeNum, teamAttributeCount)) {
					break;
				}
				
				for (var attrKey in targetAttributes) {
					if (up) {
						break;
					}
					if (targetAttributes[attrKey] == "0") {
						continue;
					}
					if (targetAttributes[attrKey] == this.ALL_ATTRIBUTE) {
						up = true;
					}
					if (targetAttributes[attrKey] == this.monsters[i].getAttribute1() || targetAttributes[attrKey] == this.monsters[i].getAttribute2()) {
						up = true;
					}
				}
				for (var typeKey in targetTypes) {
					if (up) {
						break;
					}
					if (targetTypes[typeKey] == "0") {
						continue;
					}
					if (targetTypes[typeKey] == this.monsters[i].getType1() || targetTypes[typeKey] == this.monsters[i].getType2()) {
						up = true;
					}
				}
				
				if (up) {
					var atkRate = leaderSkills[j].atk_rate;
					if (
							leaderSkills[j].start_atk_rate > 0 
							&& 
							leaderSkills[j].start_atk_rate < leaderSkills[j].atk_rate
					) 
					{
						atkRate = $("#ls_rate_select_" + (j + 1)).val();
					}
					this.hpRates[i] *= leaderSkills[j].hp_rate;
					this.atkRates[i] *= atkRate;
					this.recRates[i] *= leaderSkills[j].rec_rate;
					
				}
				
				if (leaderSkills[j].team_hp_rate > 0) {
					this.hpRates[i] *= leaderSkills[j].team_hp_rate;
				}
				
				if (leaderSkills[j].team_rcv_rate > 0) {
					this.recRates[i] *= leaderSkills[j].team_rcv_rate;
				}
			}
		}
	},
	_calculateStatus: function() {
		var hp, atk, rec, atk2, attribute1, attribute2;
		for (var i = 0;  i < 6; i++) {
			if (this.monsters[i] == null) {
				continue;
			}
			attribute1 = this.monsters[i].getAttribute1();
			attribute2 = this.monsters[i].getAttribute2();
			hp = this.monsters[i].getHp();
			atk = this.monsters[i].getAtk();
			rec = this.monsters[i].getRec();
			atk2 = this.monsters[i].getAtk2();

			this.hpTotalDefault += hp;
			this.recTotalDefault += rec;
			this.atkTotalDefault += atk + atk2;
			
			this.hpDefaults[i] = hp;
			this.atkDefaults[i] = atk;
			this.recDefaults[i] = rec;
			this.atk2Defaults[i] = atk2;
			
			this.atkAttributeTotalDefault[attribute1] += atk;
			if (atk2 > 0) {
				this.atkAttributeTotalDefault[attribute2] += atk2;
			}
			
			hp = Math.round(hp * this.hpRates[i]);
			atk = Math.round(atk * this.atkRates[i]);
			rec = Math.round(rec * this.recRates[i]);
			atk2 = Math.round(atk2 * this.atkRates[i]);
			
			this.hpTotal += hp;
			this.recTotal += rec;
			this.atkTotal += atk + atk2;
			
			this.hpResults[i] = hp;
			this.atkResults[i] = atk;
			this.recResults[i] = rec;
			this.atk2Results[i] = atk2;
			
			this.atkAttributeTotal[attribute1] += atk;
			if (atk2 > 0) {
				this.atkAttributeTotal[attribute2] += atk2;
			}
		}
	},
	
	clearRates: function() {
		this.hpRates = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
		this.atkRates = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
		this.recRates = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
	},

	clearResults: function() {
		this.hpResults = [null, null, null, null, null, null];
		this.atkResults = [null, null, null, null, null, null];
		this.atk2Results = [null, null, null, null, null, null];
		this.recResults = [null, null, null, null, null, null];
		this.hpTotal = 0;
		this.recTotal = 0;
		this.atkTotal = 0;
		this.hpDefaults = [null, null, null, null, null, null];
		this.atkDefaults = [null, null, null, null, null, null];
		this.atk2Defaults = [null, null, null, null, null, null];
		this.recDefaults = [null, null, null, null, null, null];
		this.hpTotalDefault = 0;
		this.recTotalDefault = 0;
		this.atkTotalDefault = 0;
		this.atkAttributeTotal = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0};
		this.atkAttributeTotalDefault = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0};
		
	},

	clearResult: function(id) {
		var key = parseInt(id) - 1;
		
		this.hpResults[key] = null;
		this.atkResults[key] = null;
		this.atk2Results[key] = null;
		this.recResults[key] = null;
		this.hpDefaults[key] = null;
		this.atkDefaults[key] = null;
		this.atk2Defaults[key] = null;
		this.recDefaults[key] = null;
		this.monsters[key] = null;

		$("#monster_" + id).val("");
		$("#result_name_" + id).text("");
		$("#result_hp_" + id).text("");
		$("#result_atk_" + id).text("");
		$("#result_rec_" + id).text("");
		$("#default_name_" + id).text("");
		$("#default_hp_" + id).text("");
		$("#default_atk_" + id).text("");
		$("#default_rec_" + id).text("");
		$("#default_lv_" + id).text("");
		$("#lv_" + id).text("");
		
		$("#hp_plus_" + id).val("");
		$("#atk_plus_" + id).val("");
		$("#rec_plus_" + id).val("");

		$("#lv_" + id).attr("disabled", "disabled");
		$("#hp_plus_" + id).attr("disabled", "disabled");
		$("#atk_plus_" + id).attr("disabled", "disabled");
		$("#rec_plus_" + id).attr("disabled", "disabled");
	},
	
	createUrl: function() {
		var url;
		var parameter;
		var lv, monsterId, hpPlus, atkPlus, recPlus;
		for (var i = 0; i < 6; i++) {
			if (this.monsters[i] == null) {
				continue;
			}
			
			monsterId = this.monsters[i].getMonsterId();
			lv = this.monsters[i].getLv();
			hpPlus = this.monsters[i].getHpPlus();
			atkPlus = this.monsters[i].getAtkPlus();
			recPlus = this.monsters[i].getRecPlus();
			
			parameter = "m" + (i + 1) + "=" + monsterId + "." + lv + "." + hpPlus + "." + atkPlus + "." + recPlus + "";
			if (url == null) {
				url = "/pad_team/?" + parameter;
			} else {
				url = url + "&" + parameter;
			}
			$("#url").val("http://" + location.host + url);
			//$("#tweet_url_button a").attr("data-url", encodeURIComponent("http://www.loglesslove.net" + url));
			$("#tweet_url_button a").attr("href", "https://twitter.com/share?url=" + encodeURIComponent("http://www.loglesslove.net" + url) + "&text=" + encodeURIComponent("パズドラ チームシミュレーター"));
		}
	}
};



(function (window, $) {
	var document = window.document;
	$(document).ready( function() {

	    var toggleExplain = function(explainOpened) {
	    	if (explainOpened) {
	    		$("#explain_detail").hide();
	    		$("#detail_button>a").text('詳細説明を見る');
	    	} else {
	    		$("#explain_detail").show();
	    		$("#detail_button>a").text('詳細説明を隠す');
	    	}
	    	return !explainOpened;
	    }
	    var explainOpened = false;
	    $("#detail_button").bind("click", function() {
	    	explainOpened = toggleExplain(explainOpened);
	    	return false;
	    });
	    $("#ok_button").bind("click", function() {
		    $("#explain").hide();
	    	return false;
	    });

	    var sp = false;
	    if (
	    	(navigator.userAgent.indexOf('iPhone') > 0 && navigator.userAgent.indexOf('iPad') == -1) 
    		|| navigator.userAgent.indexOf('iPod') > 0 
    		|| navigator.userAgent.indexOf('Android') > 0
    	) 
	    {
	    	sp = true;
	    }
	    for (var i = 1; i <= 6; i++) {
	    	$("#monster_" + i).select2(
    	    	{
    	    		width: "element"
    		    	,placeholder: ""
    			    ,allowClear: (i > 1)
    			    ,formatNoMatches: function(term) {return term;}
    			    ,formatInputTooShort: function(term, minLength) {return 'モンスター名を入力してください'}
    			    /**/,minimumInputLength: (sp ? 1 : 0)/**/
    			    ,loadMorePadding: 3
    	    	}
    	    );
	    }
//	    $("select.monster").select2(
//	    	{
//	    		width: "element"
//		    	,placeholder: ""
//			    ,allowClear: true
//			    ,formatNoMatches: function(term) {return term;}
//			    ,formatInputTooShort: function(term, minLength) {return 'モンスター名を入力してください'}
//			    /**/,minimumInputLength: (sp ? 1 : 0)/**/
//			    ,loadMorePadding: 3
//	    	}
//	    );
	    var padTeam = new PadTeam();
	    for (var i = 1; i <= 6; i++) {
	    	var monsterId = $("#monster_" + i).val();
	    	padTeam.selectMonster(i + "", monsterId, false);
	    	
	    }
	    
	    $(".monster").bind("change", function(){
	    	var id = this.id.replace(/monster_/, "");
	    	var monsterId = $(this).val()
		    padTeam.selectMonster(id, monsterId, true);
		});
	    $(".lv").bind("change", function(){
	    	var id = this.id.replace(/lv_/, "");
		    padTeam.changeLevel(id);
		    
		});
	    $(".hp_plus").bind("change keyup", function(){
	    	var id = this.id.replace(/hp_plus_/, "");
		    padTeam.changeHpPlus(id);
		});
	    $(".atk_plus").bind("change keyup", function(){
	    	var id = this.id.replace(/atk_plus_/, "");
		    padTeam.changeAtkPlus(id);
		});
	    $(".rec_plus").bind("change keyup", function(){
	    	var id = this.id.replace(/rec_plus_/, "");
		    padTeam.changeRecPlus(id);
		});
	    $(".reset_button").bind("click", function() {
	    	var id = this.id.replace(/reset_button_/, "");
		    padTeam.clearResult(id);
		    $("#monster_" + id).val("").trigger("change"); // select2
	    	return false;
	    });
	    $(".atk_toggle").bind("click", function() {
	    	var matches = this.id.match(/^(result|default)_atk_toggle$/);
	    	var cls = "." + matches[1] + "_atk_attr";
	    	if ($(cls).css("display") == "none") {
	    		$(cls).show();
	    	} else {
	    		$(cls).hide();
	    	}
	    	return false;
	    });
	    $("#url").bind("click", function() {
	    	this.select(0,this.value.length);
	    });
	    
	    var costRegulation = false;
	    $("#cost_toggle>a").on("click", function() {
	    	var maxCost;
	    	costRegulation = !costRegulation;
	    	if (costRegulation) {
	    		maxCost = 10;
	    		$("#cost_toggle").addClass("pressed");
	    	} else {
	    		maxCost = 0;
	    		$("#cost_toggle").removeClass("pressed");
	    	}
			(function (padTeam) {
				$.getJSON('/pad_monster/names/' + maxCost, function(data, status) {
					var $monsterSelect = $("<select />");
					var monsters = data.monsters;
					if (monsters != null) {
						var $emptyOption = $("<option />");
						$monsterSelect.append($emptyOption);
						for (var i in monsters) {
							var monsterId = monsters[i].id;
							var monsterName = monsters[i].name;
							var $option = $("<option />");
							$option.attr("value", monsterId);
							$option.text(monsterName);
							$monsterSelect.append($option);
						}
						for (var i = 1; i <= 6; i++) {
							var val = $("select#monster_" + i).val();
							$("select#monster_" + i).html($monsterSelect.html());
							$("select#monster_" + i).val(val);
						}
						
					}
				});	
			})(this);
			return false;
	    });
			
	    $(".display_area_tabs a").click(function(){
	    	var matches = this.id.match(/^(result|default)_(hp|atk|rec|lv|cost|rarity)_tab/);
	    	var kind = matches[1];
	    	var cls = matches[1] + "_" + matches[2];
	    	var status = matches[2];

	    	switch (status) {
	    		case "hp":
	    	    	$("." + kind + "_hp").show();
	    	    	$("." + kind + "_atk").hide();
	    	    	$("." + kind + "_rec").hide();
	    	    	$("." + kind + "_lv").hide();
	    	    	$("." + kind + "_cost").hide();
	    	    	$("." + kind + "_rarity").hide();

	    	    	$("#" + kind + "_hp_tab_box").attr("class", "display_area_tab_active");
	    	    	$("#" + kind + "_atk_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_rec_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_lv_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_cost_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_rarity_tab_box").attr("class", "display_area_tab");
	    	    	break;
	    		case "atk":
		    		$("." + kind + "_hp").hide();
	    	    	$("." + kind + "_atk").show();
	    	    	$("." + kind + "_rec").hide();
	    	    	$("." + kind + "_lv").hide();
	    	    	$("." + kind + "_cost").hide();
	    	    	$("." + kind + "_rarity").hide();

	    	    	$("#" + kind + "_hp_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_atk_tab_box").attr("class", "display_area_tab_active");
	    	    	$("#" + kind + "_rec_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_lv_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_cost_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_rarity_tab_box").attr("class", "display_area_tab");
	    	    	break;
	    		case "rec":
		    		$("." + kind + "_hp").hide();
	    	    	$("." + kind + "_atk").hide();
	    	    	$("." + kind + "_rec").show();
	    	    	$("." + kind + "_lv").hide();
	    	    	$("." + kind + "_cost").hide();
	    	    	$("." + kind + "_rarity").hide();

	    	    	$("#" + kind + "_hp_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_atk_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_rec_tab_box").attr("class", "display_area_tab_active");
	    	    	$("#" + kind + "_lv_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_cost_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_rarity_tab_box").attr("class", "display_area_tab");
	    	    	break;
	    		case "lv":
		    		$("." + kind + "_hp").hide();
	    	    	$("." + kind + "_atk").hide();
	    	    	$("." + kind + "_rec").hide();
	    	    	$("." + kind + "_lv").show();
	    	    	$("." + kind + "_cost").hide();
	    	    	$("." + kind + "_rarity").hide();

	    	    	$("#" + kind + "_hp_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_atk_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_rec_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_lv_tab_box").attr("class", "display_area_tab_active");
	    	    	$("#" + kind + "_cost_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_rarity_tab_box").attr("class", "display_area_tab");
	    	    	break;
	    		case "cost":
		    		$("." + kind + "_hp").hide();
	    	    	$("." + kind + "_atk").hide();
	    	    	$("." + kind + "_rec").hide();
	    	    	$("." + kind + "_lv").hide();
	    	    	$("." + kind + "_cost").show();
	    	    	$("." + kind + "_rarity").hide();

	    	    	$("#" + kind + "_hp_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_atk_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_rec_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_lv_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_cost_tab_box").attr("class", "display_area_tab_active");
	    	    	$("#" + kind + "_rarity_tab_box").attr("class", "display_area_tab");
	    	    	break;
	    		case "rarity":
		    		$("." + kind + "_hp").hide();
	    	    	$("." + kind + "_atk").hide();
	    	    	$("." + kind + "_rec").hide();
	    	    	$("." + kind + "_lv").hide();
	    	    	$("." + kind + "_cost").hide();
	    	    	$("." + kind + "_rarity").show();

	    	    	$("#" + kind + "_hp_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_atk_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_rec_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_lv_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_cost_tab_box").attr("class", "display_area_tab");
	    	    	$("#" + kind + "_rarity_tab_box").attr("class", "display_area_tab_active");
	    	    	break;
	    	}
	    	return false;
		});
	    
	    $(".ls_rate_select").on("change", function() {
	    	padTeam.changeRate();
	    });
	    $(".disable_ls").on("click", function() {
	    	padTeam.toggleLeaderSkill();
	    });
	    
		var offset1 = $('#first').offset();
		var offset2 = $('#second').offset();
		var offset3 = $('#third').offset();
		var offset;
		$(window).scroll(function () {
			offset = $(window).scrollTop();
			if (offset >= Math.round(offset3.top)) {
				$("#up a").attr("href", "#second");
				$("#down a").attr("href", "#third");
			} else if (offset >= Math.round(offset2.top)) {
				$("#up a").attr("href", "#first");
				$("#down a").attr("href", "#third");
			} else if (offset >= Math.round(offset1.top)) {
				$("#up a").attr("href", "#first");
				$("#down a").attr("href", "#second");
			} else {
				$("#up a").attr("href", "#");
				$("#down a").attr("href", "#first");
			}
			
		});

	});

})(this, jQuery);
