<!DOCTYPE html
    PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html lang="ja">
<head>
  <meta http-equiv="Content-Language" content="ja">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta http-equiv="Content-Script-Type" content="text/javascript; charset=UTF-8">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <meta name="generator" content="Hiki 1.0.0">
  <title>Rubyist Magazine - Ruby ではじめるプログラミング 【第 1 回】</title>
  <link rel="stylesheet" type="text/css" href="theme/rubima/../hiki_base.css" media="all">
  <link rel="stylesheet" type="text/css" href="theme/rubima/rubima.css" media="all">
  <link rel="alternate" type="application/atom+xml" href="/atom.xml" title="Rubyist Magazine - るびま">
  <link rel="icon" type="image/png" href="/favicon.png">
  <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
    <style type="text/css"><!--
    span.adminmenu {
      display: none;
    }
    --></style>
  <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>
  <script type="text/javascript" src="/js/jquery.oembed.js"></script>
</head>

<body>
<div class="whole-contents">
  <div class="contents">
    <a name="top"> </a>
<div class="main">
  <div class="adminmenu"><span class="adminmenu"><a href="./">るびま</a></span>&nbsp;
<span class="adminmenu"><a href="./?c=index">ページ一覧</a></span>&nbsp;
<span class="adminmenu"><a href="./?c=search">検索</a></span>&nbsp;
<span class="adminmenu"><a href="./?c=recent">更新履歴</a></span>&nbsp;
<span class="adminmenu"><a href="./?c=login;p=0002-FirstProgramming">ログイン</a></span></div>
  <h1 class="header">Ruby ではじめるプログラミング 【第 1 回】</h1>
  <div>  <div class="social-buttons" style="text-align:right">
      <!-- hatena bookmark button -->
      <a href="http://b.hatena.ne.jp/entry/magazine.rubyist.net/?0002-FirstProgramming" class="hatena-bookmark-button" title="Add this entry to Hatena Bookmark"><img src="http://b.st-hatena.com/images/entry-button/button-only.gif" alt="Add this entry to Hatena Bookmark" width="20" height="20" style="border: none;" /></a>
      <script type="text/javascript" src="http://b.st-hatena.com/js/bookmark_button.js" charset="utf-8"></script>
      <!-- like button -->
      <iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fmagazine.rubyist.net%2F?0002-FirstProgramming&amp;layout=button_count&amp;show_faces=true&amp;width=100&amp;action=like&amp;font=arial&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:100px; height:21px;" allowTransparency="true"></iframe>
      <!-- tweet button -->
      <a href="http://twitter.com/share" class="twitter-share-button" data-count="horizontal" data-via="">Tweet</a>
      <script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>

    </div>
</div>
  <div><div class="day">
  
  <div class="body">
    <div class="section">
      <p>著者：だん</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l0"> </a></span><span class="title">はじめに</span></h2>
  <div class="body">
    <div class="section">
      <h3><a name="l1"><span class="sanchor"> </span></a>Rubyでプログラミングを体験しよう</h3>
<p><strong>「これからプログラミングをはじめたい！」</strong></p>
<p><strong>「今までプログラムには興味があったけど難しそうでなかなか手を出せなかった……」</strong></p>
<p>そんな人に Ruby のプログラミングを紹介します。</p>
<p>筆者はゲームプログラマー<span class="footnote"><a name="fm01" href="./?0002-FirstProgramming#f01" title="プログラムを書いていることが多いのでそう言われますが、自分ではあくまでゲームデザイナーだと思っています！">*1</a></span>
なので、簡単なゲームプログラムを作りながらプログラムの基本的な部分を連載形式で解説します。この連載では原則として Windows で Ruby を使うことを前提に解説します。
プログラミングははじめてだけど HTML くらいなら知っているというような、ある程度コンピュータを使い慣れている方が対象です。</p>
<h3><a name="l2"><span class="sanchor"> </span></a>プログラムは魔法！？</h3>
<dl>
<dd><img alt="mage_s.png" src="./?c=plugin;plugin=attach_download;p=0002-FirstProgramming;file_name=mage_s.png">
</dd>
</dl>
<p>プログラムはコンピュータを使う人にとって魔法です。その魔法は<strong>○○○の血を引いた者にしか使うことのできない摩訶不思議な超能力</strong>ではありません。決められたルールを覚えれば誰にでも唱えることのできる呪文です。</p>
<p>この呪文、つまりプログラムとはコンピュータを動かすために人間が作る命令のことです。この命令はコンピュータが理解する特別な言葉です。この言葉を「プログラム言語」といいます。</p>
<p>現在、より簡単で便利にプログラムが作れるようにたくさんのプログラム言語が開発されています。そして、Ruby もプログラム言語のひとつです。Ruby は<strong>簡単に楽しく</strong>プログラミングできることを目的として開発されました。</p>
<h3><a name="l3"><span class="sanchor"> </span></a>Ruby はオブジェクト指向スクリプト言語</h3>
<p><img alt="dengaku_s.png" src="./?c=plugin;plugin=attach_download;p=0002-FirstProgramming;file_name=dengaku_s.png">Ruby は、便利な機能がたくさんあって、いろいろな分野<span class="footnote"><a name="fm02" href="./?0002-FirstProgramming#f02" title="もちろんゲームだって作れます。">*2</a></span>で使うことができるとても強力なプログラム言語ですが、簡単な機能を使うだけでも十分にプログラミングを楽しむことができます。また、オブジェクト指向<span class="footnote"><a name="fm03" href="./?0002-FirstProgramming#f03" title="オブジェクト指向プログラミングとはプログラミング技法のひとつです。">*3</a></span>を知らなくても大丈夫です。</p>
<p>Ruby はまつもと ゆきひろ氏が中心となって開発している<strong>フリーソフトウェア</strong>なので、誰でも無料で使用することができます。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l4"> </a></span><span class="title">Ruby のインストール</span></h2>
  <div class="body">
    <div class="section">
      <p>Ruby のインストールにはさまざまな方法がありますが、ここでは <strong>One-Click Installer - Windows</strong> を使ったインストール方法を紹介します。
Windows 以外の OS にインストールする場合や他のインストール方法を試す場合は
<a href="http://www.ruby-lang.org/ja/install.cgi?cmd=view;name=top" class="external">Ruby インストールガイド</a>を参考にしてください。</p>
<h3><a name="l5"><span class="sanchor"> </span></a>ダウンロード</h3>
<p><a href="http://rubyforge.org/projects/rubyinstaller/" class="external">RubyForge: Project Info- One-Click Ruby Installer のページ</a>からダウンロードすることができます。本稿執筆時点での最新版は 1.8.2-14_rc8 です。ここでは ruby182-14_RC8a.exe をダウンロードしたものとして話を進めます。</p>
<h3><a name="l6"><span class="sanchor"> </span></a>インストール</h3>
<p>ダウンロードした ruby182-14_RC8a.exe を起動してください。英語のインストーラが立ち上がります。</p>
<ol>
<li><strong>Next</strong> を選択してインストールを開始します</li>
<li>ライセンスに同意するなら <strong>I Agree</strong> を押します</li>
<li>コンポーネントの選択画面になります。このまま <strong>Next</strong> を押します</li>
<li>インストールディレクトリを決めます。 c:\ruby でよければそのまま <strong>Install</strong> を押します</li>
</ol>
<p><strong>Install</strong> を押すとインストールがスタートします。無事に終了したら <strong>Finish</strong> を押してインストーラを閉じます。これでインストールは完了です。</p>
<h3><a name="l7"><span class="sanchor"> </span></a>コマンド プロンプトを使う</h3>
<p><strong>コマンド プロンプト</strong> を起動しましょう。Windows XP なら次の手順で起動することができます。</p>
<ol>
<li><strong>スタート</strong> ボタンをクリック</li>
<li><strong>すべてのプログラム</strong> をクリック</li>
<li><strong>アクセサリ</strong> をクリック</li>
<li><strong>コマンド プロンプト</strong> をクリック</li>
</ol>
<p><em><img alt="dos.png" src="./?c=plugin;plugin=attach_download;p=0002-FirstProgramming;file_name=dos.png"></em></p>
<p>コマンド プロンプトが起動したらキーボードから、</p>
<pre>ruby -v</pre>
<p>と入力して Enter キーを押してください。</p>
<pre>ruby 1.8.2 (2004-07-29) [i386-mswin32]</pre>
<p>と表示されれば無事にインストールが完了しています。
以降ではコマンド プロンプトを使って Ruby のプログラムを実行することを前提に話を進めます。</p>
<p>コマンド プロンプトで動かす「文字の表示がメインのプログラム」は見た目が地味ですが、基本的な考え方は派手なグラフィックを扱うプログラムも<strong>同じ</strong>です。まずは簡単なプログラムでプログラミングの基礎をマスターしましょう。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l8"> </a></span><span class="title">はじめてのプログラム</span></h2>
  <div class="body">
    <div class="section">
      <h3><a name="l9"><span class="sanchor"> </span></a>エディタでプログラムのソースを書く</h3>
<p><img alt="usa_s.png" src="./?c=plugin;plugin=attach_download;p=0002-FirstProgramming;file_name=usa_s.png"> プログラムを実行するにはプログラムが書かれたファイルを作成しなければなりません。
このプログラムが書かれたファイルのことを<strong>ソースファイル</strong>と呼びます。
ただ単に<strong>ソース</strong>と呼ぶこともあります。</p>
<p>ソースファイルはエディタ<span class="footnote"><a name="fm04" href="./?0002-FirstProgramming#f04" title="エディタとはテキストファイルを編集するツールのことです。">*4</a></span>というアプリケーションで作成します。
Windows には「メモ帳」というエディタがはじめから用意されています。プログラムのソースを書くにはあまり便利ではありませんが、今回はこれでも十分です。</p>
<h3><a name="l10"><span class="sanchor"> </span></a>hello world</h3>
<p>ここでは <strong>C:\src</strong> というディレクトリ (フォルダ) <span class="footnote"><a name="fm05" href="./?0002-FirstProgramming#f05" title="ディレクトリとはフォルダのことです。">*5</a></span>にソースファイルを置くことにします。Cドライブのルートに src というディレクトリを作成してください。src は半角文字にしてください。</p>
<p>エディタ (メモ帳) を起動して次のように入力してください。必ず全ての文字を半角で入力してください。全角のスペースも使わないでください。アルファベットの大文字と小文字も区別されます。</p>
<pre>puts 'hello world'</pre>
<p><em><img alt="notepad.png" src="./?c=plugin;plugin=attach_download;p=0002-FirstProgramming;file_name=notepad.png"></em></p>
<p>入力し終わったらファイルを C:\src に hello.rb という名前で保存してください。</p>
<h3><a name="l11"><span class="sanchor"> </span></a>実行する</h3>
<p>コマンド プロンプトを起動します。筆者の環境ではコマンド プロンプトを起動すると、このように表示されています。</p>
<pre>C:\Documents and Settings\dan&gt;</pre>
<p>まずは作業ディレクトリに移動します。ディレクトリの移動には cd コマンドを使います。</p>
<pre>cd \src</pre>
<p>と入力して Enter を押してください。 cd とはチェンジディレクトリの意味です。ディレクトリを移動するとコマンド プロンプトに</p>
<pre>C:\src&gt;</pre>
<p>と表示されるはずです。ではプログラムを実行しましょう。Ruby のプログラムはコマンド プロンプトから次のように入力することで実行できます。</p>
<pre>ruby ソースファイル名</pre>
<p>次のように入力して hello.rb を実行しましょう。</p>
<pre>ruby hello.rb</pre>
<p>画面に</p>
<pre>hello world</pre>
<p>と表示されればプログラムがうまく実行されたことになります。もし、</p>
<pre>ruby: No such file or directory -- hello.rb (LoadError)</pre>
<p>とエラーメッセージが表示されてしまった場合は、そこに hello.rb というファイルがないということです。もう一度手順やファイル名を確認してみましょう。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l12"> </a></span><span class="title">基礎</span></h2>
  <div class="body">
    <div class="section">
      <p>さっそく簡単なプログラムを作って実行してみましょう。</p>
<h3><a name="l13"><span class="sanchor"> </span></a>文字を表示する</h3>
<p>test.rb というファイルを作成し、次の一行を書き込んでください。</p>
<pre>puts 'hello!'</pre>
<p>ファイルを作成したら</p>
<pre>ruby test.rb</pre>
<p>で実行してみましょう。実行すると「 <strong>hello! </strong>」という文字列が画面に表示されるはずです。この puts というのは文字を表示するための命令で Ruby ではこのような命令のことを<strong>メソッド</strong>といいます。</p>
<p>数字を表示することもできます。プログラムを次のように書き換えて実行してみましょう。</p>
<pre>puts 2004</pre>
<p>こんどは「 <strong>2004</strong> 」という数字が表示されたはずです。プログラム中に文字列を書く場合は ' (シングルコーテーション) で文字列を囲んでください。
数字は ' で囲まなくても OK です。</p>
<h3><a name="l14"><span class="sanchor"> </span></a>日本語の表示</h3>
<p>Ruby では日本語を表示することもできます。</p>
<pre>puts '日本語を表示します'</pre>
<p>ただし、プログラム中で日本語を使う場合、漢字コードを指定しないとプログラムが正しく動作しないことがあります。Windows では通常<strong>シフト JIS (SJIS)</strong> という漢字コードが使われます。 シフト JIS を使用する場合は、Ruby のオプションに -Ks をつけることで Ruby の認識する漢字コードを指定できます。</p>
<pre>ruby -Ks test.rb</pre>
<p>漢字コードに EUC を使う場合は -Ke をつけます。UTF-8 を使う場合は -Ku をつけます。</p>
<h3><a name="l15"><span class="sanchor"> </span></a>コメントをつける</h3>
<p>プログラム中にコメントをつけるには # (シャープ) を使います。コメントはプログラムの実行には影響しないので、コメント機能を使うとプログラム中に好きな事を書き込むことができます。</p>
<pre># このプログラムは画面に 2004 を表示します
puts 2004</pre>
<p>Ruby では # から行末までがコメントになるので、このような書き方をすることもできます。</p>
<pre>puts 2004 # 画面に 2004 を表示します</pre>
<h3><a name="l16"><span class="sanchor"> </span></a>プログラムの流れ</h3>
<p>次に test.rb を次のように書き換えてください。</p>
<pre>puts 1
puts 2
puts 3</pre>
<p>プログラムは上から順に実行されていきます。このプログラムを実行すると表示結果はこのようになります。</p>
<pre>1
2
3</pre>
<p>また、puts の代わりに print を使うと改行を行わずに文字を表示させることができます。print も文字を表示するメソッド (命令) です。</p>
<pre>print '今は'
print 11
print '時です。'</pre>
<p>test.rb を書き換えてこのプログラムを実行してみましょう。</p>
<pre>今は11時です。</pre>
<p>このように表示され、今度は改行されませんでした。</p>
<p>このテストプログラムは一瞬のうちに全てが表示されてしまいます。
このくらいの仕事は現代のコンピュータにとって朝飯前なのです。
そこで sleep というメソッドを使って一時的に流れを止めてみましょう。sleep 1 と書くとそこで 1 秒間プログラムが停止します。</p>
<pre>print '私は'
sleep 1
print 15
sleep 1
print '歳です。'</pre>
<p>このサンプルを実行すると「私は」「15」「歳です。」とそれぞれの文字列が 1 秒おきに表示されます。 sleep 1 の部分でプログラムの流れが 1 秒間止まっているのがわかると思います。
このようにプログラムは上から一行ずつ順番に実行されていきます。</p>
<p>; (セミコロン) で区切ると複数の行を一行にまとめることもできます。</p>
<pre>print '私は'     ; sleep 1
print 15         ; sleep 1
print '歳です。'</pre>
<p>このプログラムは先ほどのテストプログラムと全く同じように動作します。; で区切られたプログラムは左から順に実行されます。</p>
<p>さらに、このように全ての行を ; でつなげることもできます。</p>
<pre>print '私は' ; sleep 1 ; print 15 ; sleep 1 ; print '歳です。'</pre>
<p>プログラムには流れがあります。どんなに大きなプログラムでも必ず流れがあり、一行ずつ (一文ずつ) 順番に実行されていきます。今回のサンプルは流れがひとつしかなく、このようなプログラムをシングルスレッド<span class="footnote"><a name="fm06" href="./?0002-FirstProgramming#f06" title="流れが複数あるプログラムはマルチスレッドと言います。">*6</a></span>と言います。Ruby では明示的にスレッド機能を使わない限り自動的にシングルスレッドのプログラムになります。</p>
<h3><a name="l17"><span class="sanchor"> </span></a>変数 (へんすう)</h3>
<p><strong>変数</strong>はプログラムではとても重要な仕組みで、いろいろな場面で使用します。
ここでは数値や文字列の<strong>データを入れることのできる箱</strong><span class="footnote"><a name="fm07" href="./?0002-FirstProgramming#f07" title="実はこのたとえは正確ではありません。 Ruby の世界では、複数の箱に同時に同じデータが入ることがあります。変数とはオブジェクトに付ける名札と言ってもいいかもしれません。">*7</a></span>のようなものだと考えてください。</p>
<pre>a = 1
b = 50</pre>
<p>このプログラムでは、a という変数に 1 を、b という変数に 50 を入れています。この、変数にデータを入れる操作を<strong>代入</strong>と言います。</p>
<p>変数を puts や print 命令 (メソッド) に渡して内容を表示することもできま
す。</p>
<pre>a = 1
s = 'こんにちは'
puts a # 1 を表示
puts s # こんにちは を表示</pre>
<p>変数にはもっと長い名前をつけることもできます。実際はその変数の中身を連想
できるような名前をつけて、プログラムがわかりやすくなるように工夫します。</p>
<pre>length = 25
message = ' 南に行くと洞窟があるよ'
print length
puts message</pre>
<p>変数名に使うことのできる文字はあらかじめ決められています。最もよく使
うローカル変数は先頭の文字をアルファベットの小文字にして、続く文字にはア
ルファベットか数字かアンダースコアを使います。例えばこんな変数名を作るこ
とができます。</p>
<pre>a
b2
aBc_123_XyZ</pre>
<h3><a name="l18"><span class="sanchor"> </span></a>メソッドと引数</h3>
<p>これまでのテストプログラムに登場した puts 、print、sleep は<strong>メソッド</strong>と呼ばれます。
puts と print は文字を表示するメソッドです。
sleep はプログラムの実行を一時停止するメソッド<span class="footnote"><a name="fm08" href="./?0002-FirstProgramming#f08" title="ここでは詳しい解説はしませんが、オブジェクト指向プログラミングにおいてメソッドとはデータに対する「手続き」のことを指します。">*8</a></span>です。</p>
<p>メソッドの後ろに書くパラメータを<strong>引数 (ひきすう) </strong>といいます。puts メソッドでは引数に与える文字列や数字によっていろいろな表示を行うことができます。</p>
<p>テストプログラムではメソッドの後ろの () を省略していましたが、メソッドの引数は <strong>()</strong> で囲むこともできます。</p>
<pre>puts('おはようございます')
puts(100)</pre>
<p>sleep の引数はプログラムを停止させる秒数です。</p>
<pre>sleep 60  # 60秒間停止
sleep(60) # 60秒間停止</pre>
<h3><a name="l19"><span class="sanchor"> </span></a>演算</h3>
<dl>
<dd><img alt="hebi_s.gif" width="160" height="106" src="./?c=plugin;plugin=attach_download;p=0002-FirstProgramming;file_name=hebi_s.gif">
</dd>
</dl>
<p>プログラムの中では簡単に四則演算を行うことができます。次のプログラムを実行するとそれぞれの演算結果が表示されます。</p>
<pre>puts 5 + 5 # 足し算
puts 5 - 5 # 引き算
puts 5 * 5 # かけ算
puts 5 / 5 # わり算</pre>
<p>演算と変数を組み合わせて使うこともできます。このプログラムでもそれぞれ puts の引数の演算結果が表示されます。</p>
<pre>a = 3
b = 2
puts a + b
puts a - b
puts a * b + 5</pre>
<p>演算結果を変数に入れることもできます。</p>
<pre>a = 5 + 3
b = a * 2
c = a + b
puts c</pre>
<p>かけ算 (*)、わり算 (/) は 足し算 (+)、引き算 (-) よりも先に計算されます。次のプログラムを実行すると 30 が表示されます。</p>
<pre>puts 5 + 5 * 5</pre>
<p>足し算を先に行いたい場合は <strong>()</strong> を使います。次のプログラムを実行すると (5 + 5) × 5 の計算結果の 50 が実行されます。</p>
<pre>puts (5 + 5) * 5</pre>
<h3><a name="l20"><span class="sanchor"> </span></a>文字を入力する</h3>
<p>これまでは画面に文字を出力 (表示) するプログラムばかりだったので、今度はキーボードから文字を入力できるプログラムを作ってみましょう。</p>
<pre>input_value = gets
puts input_value</pre>
<p>まずはこのプログラムを実行してみてください。実行したらキーボードから何か文字を入力して Enter キーを押してください。 Enter キーを押すと入力した文字列の下に同じ文字列が表示されたと思います。</p>
<p>今回のプログラムソースにはなにやら見慣れないコードがたくさん出てきましたが、落ち着いてひとつひとつ見ていきましょう。
まず、1 行目の = より右側に注目してください。</p>
<pre>gets</pre>
<p>というコードがあります。 <strong>gets</strong> はコマンド プロンプトの端末から文字の入力を求めるメソッドです。 = より左側の input_value はただの変数です。とても偉そうな名前ですが、プログラムをわかりやすくするために格納するデータの内容を示した名前をつけてあります。もちろん input_value を a などの変数名に変えてもプログラムは同じように動作します。</p>
<p>入力された文字列は input_value という変数に代入されます。順序としてはまず gets が実行されて、そこで入力された文字列が input_value に渡されます。
このようなプログラムでは = の右側から実行され、その結果が左側の input_value に代入されます。</p>
<p>gets は文字列の入力処理を行い、入力された文字列を返すメソッドです。メソッドが返す値を<strong>戻り値</strong>といいます。メソッドの戻り値は = を使って変数に代入することができます。</p>
<p>2 行目は変数 input_value の中身をただ画面に表示しているだけですね。</p>
<h3><a name="l21"><span class="sanchor"> </span></a>入力された文字列を数値にして 2 倍する</h3>
<p>ちょっと難しくなるのでここは読み飛ばして頂いても結構です。興味ある方は次
のプログラムを見てください。入力された数字を 2 倍して表示するプログラム
です。</p>
<pre>input_value = gets
num = input_value.to_i
puts num * 2</pre>
<dl>
<dd><img alt="fat_s.png" src="./?c=plugin;plugin=attach_download;p=0002-FirstProgramming;file_name=fat_s.png">
</dd>
</dl>
<p>プログラムを実行したら、数字を入力して Enter キーを押してください。例え
ば 100 と入力すれば 200 という数字が表示されると思います。</p>
<p>このプログラムは 2 行目で入力された文字列を数値 (整数) に変換しています。
変数の内容を数値として計算するにはデータが数値である必要があります。</p>
<p>表示された結果は<strong>文字列</strong>も<strong>数値</strong>も同じ文字列に見えますが、プログラム中では文
字列と数値は明確に区別されています。gets が返すデータ (戻り値) は文字列に
なります。100 と入力しても input_value には必ず文字列の '100' が代入され
ます。</p>
<p>そこで 2 行目の</p>
<pre>input_value.to_i</pre>
<p>で文字列から整数を作り出しています。この to_i はメソッドです。文字列から
数値を作り出すメソッドです。</p>
<p>そして .(ドット) でつながれた to_i は input_value 、つまり '100' という文
字列データに対する操作になります。 (何か文字列).to_i は、その文字列を整
数に変換して返すメソッドです。その戻り値が変数 num に代入されます。つまり、num は 100 になるわけです。</p>
<p>3 行目ではこの整数が格納された変数 num と 2 をかけ算して結果を表示してい
ます。</p>
<p>ちなみに、こんな書き方もできます。次のプログラムも文字列と .to_i を使っ
た例です。</p>
<pre>puts '100'.to_i * 2</pre>
<p>少し複雑な話になってしまいましたが、慣れるとプログラムの流れが直感的に見
えてくるようになります。</p>
<p>はじめのサンプルプログラムはこのように書き換えることもできます。num を
省略してしまった形です。</p>
<pre>input_value = gets
puts input_value.to_i * 2</pre>
<p>input_value を省略してしまうこともできます。最初のプログラムはこの一行だ
けでも全く同じ動作をします。</p>
<pre>puts gets.to_i * 2</pre>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l22"> </a></span><span class="title">制御構造</span></h2>
  <div class="body">
    <div class="section">
      <p>前に説明したとおりプログラムには流れがあります。プログラムにはその流れに変化を与えるための<strong>制御構造</strong>という仕組みがあります。制御構造を使ってプログラムの流れをコントロールしましょう。</p>
<h3><a name="l23"><span class="sanchor"> </span></a>if 文を使って条件分岐</h3>
<p>if を使うとプログラムを分岐させることができます。プログラムを分岐させるには条件が必要です。
数値が代入されている変数 a があった場合、例えばこのような条件が指定できます。</p>
<ul>
<li>a がある値だったら</li>
<li>a がある値でなかったら</li>
<li>a がある値より大きかったら</li>
</ul>
<p>これは if を使ったプログラムの例です。</p>
<pre>a = 0
if a == 0
  puts 'a は 0 です'
end</pre>
<p>このプログラムでは 2 行目で条件判断が行われます。このとき a の内容が 0 であれば 3 行目の puts メソッドが実行されます。
if 文では if の後に書かれた条件が成立したときだけ if と end に囲まれた部分<span class="footnote"><a name="fm09" href="./?0002-FirstProgramming#f09" title="上のプログラムでは puts の前にスペースが挿入してありますが、これはプログラムを見やすくするためのものでインデント (字下げ) といいます。インデントをしなくてもプログラムは同じように動作します。">*9</a></span>が実行されます。2 行目の条件の部分で a と 0 の間に <strong>==</strong> が使われています。
この == は a と 0 が<strong>等しかったら</strong>という意味を表す記号で<strong>比較演算子</strong>といいます。このプログラムでは1行目で a の中身には 0 がセットされているので if 文の条件が成立し、 3 行目が実行されます。比較演算子にはいくつか種類があります。</p>
<table border="1">
<tr><td> == </td><td>等しい    </td></tr>
<tr><td> != </td><td>等しくない</td></tr>
<tr><td> &gt;  </td><td>より大きい</td></tr>
<tr><td> &lt;  </td><td>より小さい</td></tr>
</table>
<p>これは比較演算子に != を使ったプログラムです。</p>
<pre>a = 0
if a != 1
 puts 'a は 1 ではありません。a は'
 puts a
 puts 'です'
end</pre>
<p>if 文では変数と変数を比べることもできます。</p>
<pre>a = 10 ; b = 5
if a &gt; b
 puts 'a は b より大きいです'
end</pre>
<p><strong>else</strong> を使うと if の条件が成立しなかった時の処理を実行することもできます。</p>
<pre>a = 5 ; b = 10
if a &gt; b
 puts 'a は b より大きいです'
else
 puts 'a は b と同じか小さいです'
end</pre>
<p>このプログラムでは if の条件が成立しないので else と end にはさまれた puts が実行されます。</p>
<h3><a name="l24"><span class="sanchor"> </span></a>while で繰り返し</h3>
<p>Ruby のループ処理にはいくつかの方法がありますが、ここでは while を紹介します。
次のプログラムは while を使ってループ処理を行うプログラムです。 2 行目から 5 行目までが while によるループ処理です。</p>
<pre>ct = 0
while ct &lt; 5
  puts ct
  ct += 1
end
puts 'ループが終了しました'
puts ct</pre>
<p>書き方は if と同じです。 while の後ろに条件を書きます。while と対になる end も必要です。 ct はただの変数です。プログラムが実行されて処理が while の行まで来ると条件判定が行われます。条件が成立するとまず end の一行手前までが実行されます。プログラムの処理が end まで来るとプログラムの流れは while の行にジャンプします。そこでまた条件判定が行われ条件が成立していれば end 手前までの行が実行されます。そしてまた while の行までジャンプして条件判定が行われます。while の後ろの条件が成立している限りはこの繰り返しです。</p>
<p>4 行目にこのような処理があります。</p>
<pre>ct += 1</pre>
<p>この処理は変数 ct の内容を 1 加算するという意味です。ct には、はじめ 0 が代入されているのでここを通ると ct の内容は 0 に 1 が足されて 1 に変わります。次に通るときは 1 に 1 が足されるので ct の中身は 2 に変わります。また次に通るときにはさらに 1 が足されて ct が 3 に変わります。</p>
<p>while の条件は ct &lt; 5 となっています。つまり ct が 5 より小さければ条件成立です。ct の内容はループする度に 1 ずつ加算されていき ct が 5 になったときに条件が成立しなくなります。するとプログラムは while の行から end の次の行へジャンプします。</p>
<h3><a name="l25"><span class="sanchor"> </span></a>無限ループ</h3>
<p>次のプログラムでは条件が必ず成立するのでプログラムが終了しません。このようなループを無限ループといいます。
このプログラムを停止させるには Ctrl キーを押しながら C キーを押して Ruby を強制終了させてください。<span class="footnote"><a name="fm10" href="./?0002-FirstProgramming#f10" title="Windows の場合です。例えば Linux ならばターミナル画面で、Ctrl + D です。">*10</a></span></p>
<pre>while 1 &gt; 0
  puts 'とまらないよ'
  sleep 1
end</pre>
<p>1 &gt; 0 は必ず成立する条件です。これは 100 &gt; 10 でも 5 == 5 でも OK です。また、必ず成立する条件を書く場合、普通は true を使います。</p>
<pre>while true
  # 繰り返したい処理
end</pre>
<p>これも無限ループのプログラムです。</p>
<h3><a name="l26"><span class="sanchor"> </span></a>times を使ったループ</h3>
<p>times はある決まった回数だけループさせたいときに便利なメソッドです。次のプログラムは 10 回の繰り返し処理を行います。</p>
<pre>10.times do
  # 繰り返したい処理
  puts 'hello'
end</pre>
<p>10 の部分には変数を書くこともできます。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l27"> </a></span><span class="title">じゃんけんゲーム</span></h2>
  <div class="body">
    <div class="section">
      <p>これまでの知識を使ってじゃんけんゲームに挑戦します。
グー、チョキ、パーのいずれかを出してくる<strong>じゃんけんロボット</strong>とプレイヤーがじゃんけん対決をして、勝敗結果を表示するプログラムを作ってみましょう。</p>
<h3><a name="l28"><span class="sanchor"> </span></a>乱数 (らんすう)</h3>
<p>じゃんけんゲームを作る前に乱数という機能を説明します。
じゃんけんロボットはグー、チョキ、パーの三つのうちのどれかひとつを出してきます。
プログラムが実行されるまで何が出されるかわからないようにするために乱数を使用します。</p>
<h3><a name="l29"><span class="sanchor"> </span></a>さいころ</h3>
<pre>puts rand(6) + 1</pre>
<p><img alt="saikoro_s.png" src="./?c=plugin;plugin=attach_download;p=0002-FirstProgramming;file_name=saikoro_s.png">
これは 1 ? 6 の数値をランダムで画面に表示するプログラムです。rand(6) は 0 ? 5 の整数をランダムで返します。
rand の引数に1 以上の整数を与えると「 <strong>0</strong> 以上で <strong>与えた引数 -1 </strong>以下の整数」のいずれかの値が取得できます。</p>
<p>次のプログラムでは画面に 0 ? 19 の数値がランダムで表示されることになります。</p>
<pre>puts rand(20)</pre>
<p>ループを使えばさいころを 10 回繰り返して振ることもできます。</p>
<pre>10.times do
  puts rand(6) + 1
end</pre>
<h3><a name="l30"><span class="sanchor"> </span></a>じゃんけんロボット</h3>
<p>じゃんけんゲームを作る前にじゃんけんロボットを作ってみます。じゃんけんロボットはグー、チョキ、パーのいずれかを画面に表示するプログラムです。
<pre><span class="LineNumber">   1|</span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;じゃんけん&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   2|</span><span class="TkIDENTIFIER">sleep</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">   3|</span><span class="TkIDENTIFIER">r</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">rand</span><span class="TkLPAREN">(</span><span class="TkINTEGER">3</span><span class="TkRPAREN">)</span><span class="TkSPACE"> </span><span class="TkPLUS">+</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">   4|</span><span class="TkIF">if</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">r</span><span class="TkSPACE"> </span><span class="TkEQ">==</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">   5|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;グー&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   6|</span><span class="TkELSIF">elsif</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">r</span><span class="TkSPACE"> </span><span class="TkEQ">==</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"></span>
<span class="LineNumber">   7|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;チョキ&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   8|</span><span class="TkELSIF">elsif</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">r</span><span class="TkSPACE"> </span><span class="TkEQ">==</span><span class="TkSPACE"> </span><span class="TkINTEGER">3</span><span class="TkSPACE"></span>
<span class="LineNumber">   9|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;パー&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  10|</span><span class="TkEND">end</span></pre></p>
<p><em>※プログラムの各行の頭にある数字と縦棒は説明しやすくするための行番号なので、プログラムには書き込まないでくださいね。</em></p>
<dl>
<dd><img alt="robo_s.png" src="./?c=plugin;plugin=attach_download;p=0002-FirstProgramming;file_name=robo_s.png">
</dd>
</dl>
<p>3 行目で変数 r に 1 か 2 か 3 のどれかの数字が代入されます。6 行目と 8 行目ではじめてみる elsif というコードがあります。これは 4 行目の if に対応していて 4 行目の if の条件が成立しなかった場合に elsif までプログラムの処理がジャンプしてきます。 elsif の行までくると if 文と同じようにここで条件判定が行われます。つまりこの if から end までの処理はこういう意味です。 </p>
<ol>
<li><strong>r が 1 なら</strong> ⇒ <strong>「グー」を表示する</strong></li>
<li>r が 1 ではないときに <strong>r が 2 なら</strong> ⇒ <strong>「チョキ」を表示する</strong></li>
<li>r が 1 ではなくかつ r が 2 ではないときに <strong>r が 3 なら</strong> ⇒ <strong>「パー」を表示する</strong></li>
</ol>
<p>整理するとこういうことです。</p>
<ol>
<li>r が 1 なら ⇒ 「グー」を表示する</li>
<li>r が 2 なら ⇒ 「チョキ」を表示する</li>
<li>r が 3 なら ⇒ 「パー」を表示する</li>
</ol>
<h3><a name="l31"><span class="sanchor"> </span></a>case と when を使う</h3>
<p>先ほどのじゃんけんロボットのプログラムは <strong>case</strong> 文を使って書くこともできます。</p>
<pre><span class="LineNumber">   1|</span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;じゃんけん&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   2|</span><span class="TkIDENTIFIER">sleep</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">   3|</span><span class="TkIDENTIFIER">r</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">rand</span><span class="TkLPAREN">(</span><span class="TkINTEGER">3</span><span class="TkRPAREN">)</span><span class="TkSPACE"> </span><span class="TkPLUS">+</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">   4|</span><span class="TkCASE">case</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">r</span><span class="TkSPACE"></span>
<span class="LineNumber">   5|</span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># r が 1 のとき</span>
<span class="LineNumber">   6|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;グー&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   7|</span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># r が 2 のとき</span>
<span class="LineNumber">   8|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;チョキ&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   9|</span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">3</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># r が 3 のとき</span>
<span class="LineNumber">  10|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;パー&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  11|</span><span class="TkEND">end</span></pre>
<p>ひとつの同じ変数を何度も == で比較する場合は case 文を使ったほうが便利です。</p>
<h3><a name="l32"><span class="sanchor"> </span></a>じゃんけんゲームのプログラム</h3>
<p>以下が完成したじゃんけんプログラムです。</p>
<pre><span class="LineNumber">   1|</span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;じゃんけんゲーム開始&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   2|</span><span class="TkIDENTIFIER">sleep</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">   3|</span><span class="TkSPACE"></span>
<span class="LineNumber">   4|</span><span class="TkCOMMENT"># プレイヤーのじゃんけん入力</span>
<span class="LineNumber">   5|</span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;何を出しますか？&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   6|</span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;1 グー&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   7|</span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;2 チョキ&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   8|</span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;3 パー&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   9|</span><span class="TkIDENTIFIER">input_value</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">gets</span><span class="TkSPACE"></span>
<span class="LineNumber">  10|</span><span class="TkSPACE"></span>
<span class="LineNumber">  11|</span><span class="TkCOMMENT"># じゃんけんロボットの処理</span>
<span class="LineNumber">  12|</span><span class="TkIDENTIFIER">robo</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">rand</span><span class="TkLPAREN">(</span><span class="TkINTEGER">3</span><span class="TkRPAREN">)</span><span class="TkSPACE"> </span><span class="TkPLUS">+</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">  13|</span><span class="TkCASE">case</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">robo</span><span class="TkSPACE"></span>
<span class="LineNumber">  14|</span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">  15|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;ロボットはグーを出した！&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  16|</span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"></span>
<span class="LineNumber">  17|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;ロボットはチョキを出した！&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  18|</span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">3</span><span class="TkSPACE"></span>
<span class="LineNumber">  19|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;ロボットはパーを出した！&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  20|</span><span class="TkEND">end</span><span class="TkSPACE"></span>
<span class="LineNumber">  21|</span><span class="TkSPACE"></span>
<span class="LineNumber">  22|</span><span class="TkCOMMENT"># じゃんけん結果判定</span>
<span class="LineNumber">  23|</span><span class="TkIDENTIFIER">player</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">input_value</span><span class="TkDOT">.</span><span class="TkIDENTIFIER">to_i</span><span class="TkSPACE"></span>
<span class="LineNumber">  24|</span><span class="TkCASE">case</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">player</span><span class="TkSPACE"></span>
<span class="LineNumber">  25|</span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">  26|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;あなたはグーを出した！&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  27|</span><span class="TkSPACE">  </span><span class="TkCASE">case</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">robo</span><span class="TkSPACE"></span>
<span class="LineNumber">  28|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># ロボットがグーなら</span>
<span class="LineNumber">  29|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;引き分けです&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  30|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># ロボットがチョキなら</span>
<span class="LineNumber">  31|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;あなたの勝ちです&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  32|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">3</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># ロボットがパーなら</span>
<span class="LineNumber">  33|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;あなたの負けです&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  34|</span><span class="TkSPACE">  </span><span class="TkEND">end</span><span class="TkSPACE"></span>
<span class="LineNumber">  35|</span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"></span>
<span class="LineNumber">  36|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;あなたはチョキを出した！&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  37|</span><span class="TkSPACE">  </span><span class="TkCASE">case</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">robo</span><span class="TkSPACE"></span>
<span class="LineNumber">  38|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># グー</span>
<span class="LineNumber">  39|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;あなたの負けです&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  40|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># チョキ</span>
<span class="LineNumber">  41|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;引き分けです&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  42|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">3</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># パー</span>
<span class="LineNumber">  43|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;あなたの勝ちです&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  44|</span><span class="TkSPACE">  </span><span class="TkEND">end</span><span class="TkSPACE"></span>
<span class="LineNumber">  45|</span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">3</span><span class="TkSPACE"></span>
<span class="LineNumber">  46|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;あなたはパーを出した！&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  47|</span><span class="TkSPACE">  </span><span class="TkCASE">case</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">robo</span><span class="TkSPACE"></span>
<span class="LineNumber">  48|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># グー</span>
<span class="LineNumber">  49|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;あなたの勝ちです&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  50|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># チョキ</span>
<span class="LineNumber">  51|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;あなたの負けです&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  52|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">3</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># パー</span>
<span class="LineNumber">  53|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;引き分けです&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  54|</span><span class="TkSPACE">  </span><span class="TkEND">end</span><span class="TkSPACE"></span>
<span class="LineNumber">  55|</span><span class="TkELSE">else</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># どの when の条件も成立しなかったとき</span>
<span class="LineNumber">  56|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;あなたは何も出さなかった！&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  57|</span><span class="TkSPACE">  </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;あなたの負けです&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  58|</span><span class="TkEND">end</span></pre>
<p>case 文の中に case 文が入っていることに注意してください。</p>
<p>55 行目の else は 24 行目の case に対応していて変数 player が 1、2、3 ではなかったときに else と end に囲まれた部分が実行されます。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l33"> </a></span><span class="title">ゲームブックを作る</span></h2>
  <div class="body">
    <div class="section">
      <p>最後に、今まで紹介した機能を使ってゲームブックプログラムを作ってみました。
まずはこのプログラムを実行してみてください。
選択肢が表示されたら数字を入力してから「Enter」を押してください。</p>
<pre><span class="LineNumber">   1|</span><span class="TkIDENTIFIER">scene</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;opening&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   2|</span><span class="TkWHILE">while</span><span class="TkSPACE"> </span><span class="TkTRUE">true</span><span class="TkSPACE"></span>
<span class="LineNumber">   3|</span><span class="TkSPACE">  </span><span class="TkCASE">case</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">scene</span><span class="TkSPACE"></span>
<span class="LineNumber">   4|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;opening&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   5|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;３本の分かれ道があります。どの道を進みますか。&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">   6|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&quot;  1 左の道&quot;</span><span class="TkSPACE"></span>
<span class="LineNumber">   7|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&quot;  2 真ん中の道&quot;</span><span class="TkSPACE"></span>
<span class="LineNumber">   8|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&quot;  3 右の道&quot;</span><span class="TkSPACE"></span>
<span class="LineNumber">   9|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">input_value</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">gets</span><span class="TkSPACE"></span>
<span class="LineNumber">  10|</span><span class="TkSPACE">    </span><span class="TkCASE">case</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">input_value</span><span class="TkDOT">.</span><span class="TkIDENTIFIER">to_i</span><span class="TkSPACE"></span>
<span class="LineNumber">  11|</span><span class="TkSPACE">    </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">  12|</span><span class="TkSPACE">      </span><span class="TkIDENTIFIER">scene</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;left&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  13|</span><span class="TkSPACE">    </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"></span>
<span class="LineNumber">  14|</span><span class="TkSPACE">      </span><span class="TkIDENTIFIER">scene</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;center&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  15|</span><span class="TkSPACE">    </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">3</span><span class="TkSPACE"></span>
<span class="LineNumber">  16|</span><span class="TkSPACE">      </span><span class="TkIDENTIFIER">scene</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;right&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  17|</span><span class="TkSPACE">    </span><span class="TkEND">end</span><span class="TkSPACE"></span>
<span class="LineNumber">  18|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;left&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  19|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;あっ！&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  20|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">sleep</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">  21|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;落とし穴に落ちてしまいました。&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  22|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;〜 GAME OVER 〜&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  23|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">exit</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># プログラムを終了</span>
<span class="LineNumber">  24|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;center&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  25|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;真ん中の道をまっすぐ歩いていくと……&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  26|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">sleep</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">  27|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;宝箱をみつけました！&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  28|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&quot;  1 そのままにしておく&quot;</span><span class="TkSPACE"></span>
<span class="LineNumber">  29|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&quot;  2 あける&quot;</span><span class="TkSPACE"></span>
<span class="LineNumber">  30|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">input_value</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">gets</span><span class="TkSPACE"></span>
<span class="LineNumber">  31|</span><span class="TkSPACE">    </span><span class="TkCASE">case</span><span class="TkSPACE"> </span><span class="TkIDENTIFIER">input_value</span><span class="TkDOT">.</span><span class="TkIDENTIFIER">to_i</span><span class="TkSPACE"></span>
<span class="LineNumber">  32|</span><span class="TkSPACE">    </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">  33|</span><span class="TkSPACE">      </span><span class="TkIDENTIFIER">scene</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;leave&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  34|</span><span class="TkSPACE">    </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"></span>
<span class="LineNumber">  35|</span><span class="TkSPACE">      </span><span class="TkIDENTIFIER">scene</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;ending&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  36|</span><span class="TkSPACE">    </span><span class="TkEND">end</span><span class="TkSPACE"></span>
<span class="LineNumber">  37|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;right&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  38|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;しばらく歩き続けると　もとの場所にもどってしまいました。&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  39|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">sleep</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">  40|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">scene</span><span class="TkSPACE"> </span><span class="TkASSIGN">=</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;opening&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  41|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;leave&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  42|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;宝箱には見向きもせず　お家に帰りました。&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  43|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;〜 GAME OVER 〜&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  44|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">exit</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># プログラムを終了</span>
<span class="LineNumber">  45|</span><span class="TkSPACE">  </span><span class="TkWHEN">when</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;ending&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  46|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;パカッ&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  47|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">sleep</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">  48|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;まばゆい光があふれだす……&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  49|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">sleep</span><span class="TkSPACE"> </span><span class="TkINTEGER">1</span><span class="TkSPACE"></span>
<span class="LineNumber">  50|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;１００枚の金貨を手に入れました！&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  51|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">sleep</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"></span>
<span class="LineNumber">  52|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;〜 CONGRATULATIONS! 〜&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  53|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">sleep</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"></span>
<span class="LineNumber">  54|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;    シナリオ だん&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  55|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">sleep</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"></span>
<span class="LineNumber">  56|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;   プログラム だん&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  57|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">sleep</span><span class="TkSPACE"> </span><span class="TkINTEGER">2</span><span class="TkSPACE"></span>
<span class="LineNumber">  58|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">puts</span><span class="TkSPACE"> </span><span class="TkSTRING">&#39;      〜 END 〜&#39;</span><span class="TkSPACE"></span>
<span class="LineNumber">  59|</span><span class="TkSPACE">    </span><span class="TkIDENTIFIER">exit</span><span class="TkSPACE"> </span><span class="TkCOMMENT"># プログラムを終了</span>
<span class="LineNumber">  60|</span><span class="TkSPACE">  </span><span class="TkEND">end</span><span class="TkSPACE"></span>
<span class="LineNumber">  61|</span><span class="TkEND">end</span></pre>
<p>乱数を使っていないので、同じ選択肢を選べば毎回同じ結果になります。</p>
<p><strong>exit</strong> はプログラムを終了させるメソッドです。</p>
<p>exit 以外はこれまでに紹介した機能しか使っていないのでじっくりソースを読んでみてください。
一行ずつ理解しながら読んでいけば頭の中でプログラムの流れをイメージすることができると思います。</p>
<p>読者のみなさんもこのプログラムを参考にゲームブックプログラムを是非作ってみてください<span class="footnote"><a name="fm11" href="./?0002-FirstProgramming#f11" title="このゲームを作るのに一番気を使ったのは sleep です。sleep のタイミングは何度もプログラムを実行しながら調整しました。微妙な数値で印象がガラリと変わってしまうからアプリケーションって不思議ですね。">*11</a></span>。乱数の機能を使えば新たなゲーム性をプラスすることもできるでしょう。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l34"> </a></span><span class="title">著者について</span></h2>
  <div class="body">
    <div class="section">
      <p>だん (dan at dgames dot jp)</p>
<p>ゲームメーカーに勤めるゲームクリエイター。</p>
<p>最近までずっとコンシューマーゲームソフトの開発という閉じた世界にいた。この春からこっち、オープンソースというものに興味を持ちはじめオープンソースで面白いゲームが作れないかと<a href="http://www.dgames.jp/dan/" class="external">開発日記</a>にて試行錯誤している。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l35"> </a></span><span class="title">Ruby ではじめるプログラミング 連載一覧</span></h2>
  <div class="body">
    <div class="section">
      <ul>
<li><strong>Ruby ではじめるプログラミング 【第 1 回】</strong>
<li><a href="./?0003-FirstProgramming">Ruby ではじめるプログラミング 【第 2 回】</a>
<li><a href="./?0004-FirstProgramming">Ruby ではじめるプログラミング 【第 3 回】</a>
<li><a href="./?0005-FirstProgramming">Ruby ではじめるプログラミング 【最終回】</a>
</ul>

<hr>
    </div>
  </div>
</div>
</div>
  <div class="day">
    <div class="comment">
      <div class="caption">
        更新日時:2013/05/03 08:26:04<br>
        キーワード:<br>
        参照:[<a href="./?0002">Rubyist Magazine 0002 号</a>] [<a href="./?0003-FirstProgramming">Ruby ではじめるプログラミング 【第 2 回】</a>] [<a href="./?0005-FirstProgramming">Ruby ではじめるプログラミング 【最終回】</a>] [<a href="./?0045-RubyistMagazineRanking">0045 号 アクセスランキング</a>] [<a href="./?0046-RubyistMagazineRanking">0046 号 アクセスランキング</a>] [<a href="./?VolumeIndices">各号目次</a>] <br>
        
      </div>
    </div>
    <div><div class="footnote">
  <p class="footnote"><a name="f01" href="./?0002-FirstProgramming#fm01">*1</a>&nbsp;プログラムを書いていることが多いのでそう言われますが、自分ではあくまでゲームデザイナーだと思っています！
</p>
  <p class="footnote"><a name="f02" href="./?0002-FirstProgramming#fm02">*2</a>&nbsp;もちろんゲームだって作れます。
</p>
  <p class="footnote"><a name="f03" href="./?0002-FirstProgramming#fm03">*3</a>&nbsp;オブジェクト指向プログラミングとはプログラミング技法のひとつです。
</p>
  <p class="footnote"><a name="f04" href="./?0002-FirstProgramming#fm04">*4</a>&nbsp;エディタとはテキストファイルを編集するツールのことです。
</p>
  <p class="footnote"><a name="f05" href="./?0002-FirstProgramming#fm05">*5</a>&nbsp;ディレクトリとはフォルダのことです。
</p>
  <p class="footnote"><a name="f06" href="./?0002-FirstProgramming#fm06">*6</a>&nbsp;流れが複数あるプログラムはマルチスレッドと言います。
</p>
  <p class="footnote"><a name="f07" href="./?0002-FirstProgramming#fm07">*7</a>&nbsp;実はこのたとえは正確ではありません。 Ruby の世界では、複数の箱に同時に同じデータが入ることがあります。変数とはオブジェクトに付ける名札と言ってもいいかもしれません。
</p>
  <p class="footnote"><a name="f08" href="./?0002-FirstProgramming#fm08">*8</a>&nbsp;ここでは詳しい解説はしませんが、オブジェクト指向プログラミングにおいてメソッドとはデータに対する「手続き」のことを指します。
</p>
  <p class="footnote"><a name="f09" href="./?0002-FirstProgramming#fm09">*9</a>&nbsp;上のプログラムでは puts の前にスペースが挿入してありますが、これはプログラムを見やすくするためのものでインデント (字下げ) といいます。インデントをしなくてもプログラムは同じように動作します。
</p>
  <p class="footnote"><a name="f10" href="./?0002-FirstProgramming#fm10">*10</a>&nbsp;Windows の場合です。例えば Linux ならばターミナル画面で、Ctrl + D です。
</p>
  <p class="footnote"><a name="f11" href="./?0002-FirstProgramming#fm11">*11</a>&nbsp;このゲームを作るのに一番気を使ったのは sleep です。sleep のタイミングは何度もプログラムを実行しながら調整しました。微妙な数値で印象がガラリと変わってしまうからアプリケーションって不思議ですね。
</p>
</div>
  <script type="text/javascript">
          $(document).ready(function() {
                  $("a.oembed").oembed(null, {
                          maxWidth: 640,
                          maxHeight: 480
                  });
          });
  </script>
</div>
  </div>
</div>

<hr style="display: none">
<div class="sidebar">
  <form action="./" method="get">
  <input type="text" name="key" size="15">
  <input type="submit" name="comment" value="検索">
  <input type="hidden" name="c" value="search">
</form>

<h4><a name="s0"> </a><a href="./?0046">0046号 (2014-04)</a></h4>
<ul>
<li><a href="./?0046-ForeWord">巻頭言</a></li>
<li><a href="./?0046-SpecialInterviewKosaki">インタビュー特別編</a></li>
<li><a href="./?0046-RailsAndBackbonejs">Backbone.js on Rails</a></li>
<li><a href="./?0046-RandexMultibyteGem">新卒エンジニアがgem公開</a></li>
<li><a href="./?0046-SingletonClassForBeginners">class &lt;&lt; self の話</a></li>
<li><a href="./?0046-Milkode">コード検索エンジンの作り方</a></li>
<li><a href="./?0046-Present">読者プレゼント</a></li>
<li><a href="./?FirstStepRuby">Rubyの歩き方</a></li>
<li><a href="./?0046-RubyistMagazineRanking">アクセスランキング Vol.46</a></li>
<li><a href="https://github.com/ruby-no-kai/official/wiki/RubyEventCheck" class="external">RubyEventCheck</a></li>
<li><a href="./?0046-EditorsNote">編集後記</a></li>
</ul>
<h4><a name="s1"> </a>バックナンバー</h4>
<ul>
<li><a href="./?VolumeIndices">各号目次</a></li>
<li><a href="./?CategoryIndices">分野別目次</a></li>
<li><a href="./?0045">0045号 (2013-12)</a></li>
<li><a href="./?0044">0044号 (2013-09)</a></li>
<li><a href="./?0043">0043号 (2013-07)</a></li>
<li><a href="./?0042">0042号 (2013-05)</a></li>
<li><a href="./?Ruby200SpecialEn">2.0.0 Special (En)</a></li>
<li><a href="./?0041">0041号 (2013-02)</a></li>
<li><a href="./?0040">0040号 (2012-11)</a></li>
<li><a href="./?0039">0039号 (2012-09)</a></li>
<li><a href="./?AnnounceRubyKaja">RubyKajaのご紹介</a></li>
<li><a href="./?0038">0038号 (2012-05)</a></li>
<li><a href="./?0037">0037号 (2012-02)</a></li>
<li><a href="./?0036">0036号 (2011-11)</a></li>
<li><a href="./?0035">0035号 (2011-09)</a></li>
<li><a href="./?preRubyKaigi2011">RubyKaigi2011直前特集号</a></li>
<li><a href="./?0034">0034号 (2011-06)</a></li>
<li><a href="./?0033">0033号 (2011-04)</a></li>
<li><a href="./?0032">0032号 (2011-01)</a></li>
<li><a href="./?0031">0031号 (2010-10)</a></li>
<li><a href="./?preRubyKaigi2010">RubyKaigi2010直前特集号</a></li>
<li><a href="./?0030">0030号 (2010-06)</a></li>
<li><a href="./?0029">0029号 (2010-03)</a></li>
<li><a href="./?0028">0028号 (2009-12)</a></li>
<li><a href="./?0027">0027号 (2009-09)</a></li>
<li><a href="./?0026">0026号 (2009-06)</a></li>
<li><a href="./?0025">0025号 (2009-02)</a></li>
<li><a href="./?0024">0024号 (2008-10)</a></li>
<li><a href="./?0023">0023号 (2008-03)</a></li>
<li><a href="./?0022">0022号 (2007-12)</a></li>
<li><a href="./?0021">0021号 (2007-09)</a></li>
<li><a href="./?0020">0020号 (2007-08)</a></li>
<li><a href="./?0019">0019号 (2007-05)</a></li>
<li><a href="./?0018">0018号 (2007-02)</a></li>
<li><a href="./?0017">0017号 (2006-11)</a></li>
<li><a href="./?0016">0016号 (2006-09)</a></li>
<li><a href="./?0015">0015号 (2006-07)</a></li>
<li><a href="./?RubyKaigi2006">RubyKaigi2006特別号</a></li>
<li><a href="./?0014">0014号 (2006-05)</a></li>
<li><a href="./?0013">0013号 (2006-02)</a></li>
<li><a href="./?0012">0012号 (2005-12)</a></li>
<li><a href="./?0011">0011号 (2005-11)</a></li>
<li><a href="./?0010">0010号 (2005-10)</a></li>
<li><a href="./?0009">0009号 (2005-09)</a></li>
<li><a href="./?0008">0008号 (2005-07)</a></li>
<li><a href="./?0007">0007号 (2005-06)</a></li>
<li><a href="./?0006">0006号 (2005-05)</a></li>
<li><a href="./?0005">0005号 (2005-02)</a></li>
<li><a href="./?0004">0004号 (2004-12)</a></li>
<li><a href="./?0003">0003号 (2004-11)</a></li>
<li><a href="./?0002">0002号 (2004-10)</a></li>
<li><a href="./?0001">0001号 (2004-09)</a></li>
</ul>
<h4><a name="s2"> </a>リンク</h4>
<ul>
<li><a href="http://www.ruby-lang.org/" class="external">オブジェクト指向言語Ruby</a></li>
<li><a href="http://jp.rubyist.net/" class="external">日本Rubyの会</a></li>
</ul>
<p><a href="./"><img class="rubima_logo" src="theme/rubima/rubima_logo.png" alt="るびま" width="135" height="82"></a>
<a href="http://jp.rubyist.net/"><img class="rubynokai" src="http://jp.rubyist.net/rubynokai01.png" alt="日本 Ruby の会" width="88" height="31"></a></p>

</div>


  </div>
  <div class="footer">Generated by <a href="http://hikiwiki.org/">Hiki</a> 1.0.0 (2013-03-30).<br>
Powered by <a href="http://www.ruby-lang.org/">Ruby</a> 2.1.1-p76 (2014-02-24).<br>
Founded by RubiMa Editors.<br>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-41117431-1', 'rubyist.net');
  ga('send', 'pageview');

</script>
</div>
</div>
</body>
</html>
